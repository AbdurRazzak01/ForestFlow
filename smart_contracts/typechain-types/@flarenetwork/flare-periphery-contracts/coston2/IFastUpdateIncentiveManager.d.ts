/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFastUpdateIncentiveManagerContract
  extends Truffle.Contract<IFastUpdateIncentiveManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IFastUpdateIncentiveManagerInstance>;
}

export interface IncentiveOffered {
  name: "IncentiveOffered";
  args: {
    rewardEpochId: BN;
    rangeIncrease: BN;
    sampleSizeIncrease: BN;
    offerAmount: BN;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface InflationRewardsOffered {
  name: "InflationRewardsOffered";
  args: {
    rewardEpochId: BN;
    feedConfigurations: {
      feedId: string;
      rewardBandValue: BN;
      inflationShare: BN;
    }[];
    amount: BN;
    0: BN;
    1: { feedId: string; rewardBandValue: BN; inflationShare: BN }[];
    2: BN;
  };
}

type AllEvents = IncentiveOffered | InflationRewardsOffered;

export interface IFastUpdateIncentiveManagerInstance
  extends Truffle.ContractInstance {
  getBaseScale(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentSampleSizeIncreasePrice(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getExpectedSampleSize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getIncentiveDuration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getPrecision(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getRange(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getScale(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  offerIncentive: {
    (
      _offer: {
        rangeIncrease: number | BN | string;
        rangeLimit: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _offer: {
        rangeIncrease: number | BN | string;
        rangeLimit: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _offer: {
        rangeIncrease: number | BN | string;
        rangeLimit: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _offer: {
        rangeIncrease: number | BN | string;
        rangeLimit: number | BN | string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  rangeIncreaseLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  rangeIncreasePrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  sampleIncreaseLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    getBaseScale(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCurrentSampleSizeIncreasePrice(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getExpectedSampleSize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getIncentiveDuration(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getPrecision(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getRange(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getScale(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    offerIncentive: {
      (
        _offer: {
          rangeIncrease: number | BN | string;
          rangeLimit: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _offer: {
          rangeIncrease: number | BN | string;
          rangeLimit: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _offer: {
          rangeIncrease: number | BN | string;
          rangeLimit: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _offer: {
          rangeIncrease: number | BN | string;
          rangeLimit: number | BN | string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    rangeIncreaseLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    rangeIncreasePrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    sampleIncreaseLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
