/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IPollingFtsoContract
  extends Truffle.Contract<IPollingFtsoInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPollingFtsoInstance>;
}

export interface FtsoProposalCreated {
  name: "FtsoProposalCreated";
  args: {
    proposalId: BN;
    rewardEpochId: BN;
    proposer: string;
    description: string;
    voteStartTime: BN;
    voteEndTime: BN;
    threshold: BN;
    majorityConditionBIPS: BN;
    totalWeight: BN;
    0: BN;
    1: BN;
    2: string;
    3: string;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
  };
}

export interface MaintainerSet {
  name: "MaintainerSet";
  args: {
    newMaintainer: string;
    0: string;
  };
}

export interface ParametersSet {
  name: "ParametersSet";
  args: {
    votingDelaySeconds: BN;
    votingPeriodSeconds: BN;
    thresholdConditionBIPS: BN;
    majorityConditionBIPS: BN;
    proposalFeeValueWei: BN;
    0: BN;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
  };
}

export interface ProposalCanceled {
  name: "ProposalCanceled";
  args: {
    proposalId: BN;
    0: BN;
  };
}

export interface ProxyVoterSet {
  name: "ProxyVoterSet";
  args: {
    account: string;
    proxyVoter: string;
    0: string;
    1: string;
  };
}

export interface VoteCast {
  name: "VoteCast";
  args: {
    voter: string;
    proposalId: BN;
    support: BN;
    forVotePower: BN;
    againstVotePower: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
  };
}

type AllEvents =
  | FtsoProposalCreated
  | MaintainerSet
  | ParametersSet
  | ProposalCanceled
  | ProxyVoterSet
  | VoteCast;

export interface IPollingFtsoInstance extends Truffle.ContractInstance {
  canPropose(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  canVote(
    _account: string,
    _proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  cancel: {
    (
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  castVote: {
    (
      _proposalId: number | BN | string,
      _support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposalId: number | BN | string,
      _support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposalId: number | BN | string,
      _support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposalId: number | BN | string,
      _support: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLastProposal(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: string }>;

  getProposalDescription(
    _proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getProposalInfo(
    _proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
  }>;

  getProposalVotes(
    _proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  hasVoted(
    _proposalId: number | BN | string,
    _voter: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  propose: {
    (_description: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _description: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setParameters: {
    (
      _votingDelaySeconds: number | BN | string,
      _votingPeriodSeconds: number | BN | string,
      _thresholdConditionBIPS: number | BN | string,
      _majorityConditionBIPS: number | BN | string,
      _proposalFeeValueWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _votingDelaySeconds: number | BN | string,
      _votingPeriodSeconds: number | BN | string,
      _thresholdConditionBIPS: number | BN | string,
      _majorityConditionBIPS: number | BN | string,
      _proposalFeeValueWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _votingDelaySeconds: number | BN | string,
      _votingPeriodSeconds: number | BN | string,
      _thresholdConditionBIPS: number | BN | string,
      _majorityConditionBIPS: number | BN | string,
      _proposalFeeValueWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _votingDelaySeconds: number | BN | string,
      _votingPeriodSeconds: number | BN | string,
      _thresholdConditionBIPS: number | BN | string,
      _majorityConditionBIPS: number | BN | string,
      _proposalFeeValueWei: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setProxyVoter: {
    (_proxyVoter: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _proxyVoter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proxyVoter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proxyVoter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  state(
    _proposalId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    canPropose(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    canVote(
      _account: string,
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    cancel: {
      (
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    castVote: {
      (
        _proposalId: number | BN | string,
        _support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposalId: number | BN | string,
        _support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposalId: number | BN | string,
        _support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposalId: number | BN | string,
        _support: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getLastProposal(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: string }>;

    getProposalDescription(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getProposalInfo(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: string;
      2: string;
      3: BN;
      4: BN;
      5: BN;
      6: BN;
      7: BN;
    }>;

    getProposalVotes(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    hasVoted(
      _proposalId: number | BN | string,
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    propose: {
      (_description: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _description: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setParameters: {
      (
        _votingDelaySeconds: number | BN | string,
        _votingPeriodSeconds: number | BN | string,
        _thresholdConditionBIPS: number | BN | string,
        _majorityConditionBIPS: number | BN | string,
        _proposalFeeValueWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _votingDelaySeconds: number | BN | string,
        _votingPeriodSeconds: number | BN | string,
        _thresholdConditionBIPS: number | BN | string,
        _majorityConditionBIPS: number | BN | string,
        _proposalFeeValueWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _votingDelaySeconds: number | BN | string,
        _votingPeriodSeconds: number | BN | string,
        _thresholdConditionBIPS: number | BN | string,
        _majorityConditionBIPS: number | BN | string,
        _proposalFeeValueWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _votingDelaySeconds: number | BN | string,
        _votingPeriodSeconds: number | BN | string,
        _thresholdConditionBIPS: number | BN | string,
        _majorityConditionBIPS: number | BN | string,
        _proposalFeeValueWei: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setProxyVoter: {
      (_proxyVoter: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _proxyVoter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proxyVoter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proxyVoter: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    state(
      _proposalId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
