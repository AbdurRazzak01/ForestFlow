/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IRNatAccountContract
  extends Truffle.Contract<IRNatAccountInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRNatAccountInstance>;
}

export interface ClaimExecutorsSet {
  name: "ClaimExecutorsSet";
  args: {
    executors: string[];
    0: string[];
  };
}

export interface ExternalTokenTransferred {
  name: "ExternalTokenTransferred";
  args: {
    token: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface FundsWithdrawn {
  name: "FundsWithdrawn";
  args: {
    amount: BN;
    wrap: boolean;
    0: BN;
    1: boolean;
  };
}

export interface Initialized {
  name: "Initialized";
  args: {
    owner: string;
    rNat: string;
    0: string;
    1: string;
  };
}

export interface LockedAmountBurned {
  name: "LockedAmountBurned";
  args: {
    amount: BN;
    0: BN;
  };
}

type AllEvents =
  | ClaimExecutorsSet
  | ExternalTokenTransferred
  | FundsWithdrawn
  | Initialized
  | LockedAmountBurned;

export interface IRNatAccountInstance extends Truffle.ContractInstance {
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  rNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

  receivedRewards(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  withdrawnRewards(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    rNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

    receivedRewards(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    withdrawnRewards(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
