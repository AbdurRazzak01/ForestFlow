/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IGenericRewardManagerContract
  extends Truffle.Contract<IGenericRewardManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IGenericRewardManagerInstance>;
}

export interface AllowedClaimRecipientsChanged {
  name: "AllowedClaimRecipientsChanged";
  args: {
    rewardOwner: string;
    recipients: string[];
    0: string;
    1: string[];
  };
}

export interface ClaimExecutorsChanged {
  name: "ClaimExecutorsChanged";
  args: {
    rewardOwner: string;
    executors: string[];
    0: string;
    1: string[];
  };
}

export interface RewardClaimed {
  name: "RewardClaimed";
  args: {
    beneficiary: string;
    sentTo: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface RewardManagerActivated {
  name: "RewardManagerActivated";
  args: {
    rewardManager: string;
    0: string;
  };
}

export interface RewardManagerDeactivated {
  name: "RewardManagerDeactivated";
  args: {
    rewardManager: string;
    0: string;
  };
}

export interface RewardsDistributed {
  name: "RewardsDistributed";
  args: {
    addresses: string[];
    rewards: BN[];
    0: string[];
    1: BN[];
  };
}

type AllEvents =
  | AllowedClaimRecipientsChanged
  | ClaimExecutorsChanged
  | RewardClaimed
  | RewardManagerActivated
  | RewardManagerDeactivated
  | RewardsDistributed;

export interface IGenericRewardManagerInstance
  extends Truffle.ContractInstance {
  active(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  allowedClaimRecipients(
    _rewardOwner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  claim: {
    (
      _rewardOwner: string,
      _recipient: string,
      _rewardAmount: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardOwner: string,
      _recipient: string,
      _rewardAmount: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardOwner: string,
      _recipient: string,
      _rewardAmount: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardOwner: string,
      _recipient: string,
      _rewardAmount: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimExecutors(
    _rewardOwner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getStateOfRewards(
    _beneficiary: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN }>;

  setAllowedClaimRecipients: {
    (_recipients: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _recipients: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _recipients: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _recipients: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setClaimExecutors: {
    (_executors: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _executors: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _executors: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _executors: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    active(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    allowedClaimRecipients(
      _rewardOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    claim: {
      (
        _rewardOwner: string,
        _recipient: string,
        _rewardAmount: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardOwner: string,
        _recipient: string,
        _rewardAmount: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardOwner: string,
        _recipient: string,
        _rewardAmount: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardOwner: string,
        _recipient: string,
        _rewardAmount: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimExecutors(
      _rewardOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getStateOfRewards(
      _beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN }>;

    setAllowedClaimRecipients: {
      (_recipients: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _recipients: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _recipients: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _recipients: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setClaimExecutors: {
      (_executors: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _executors: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _executors: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _executors: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
