/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IRNatContract extends Truffle.Contract<IRNatInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IRNatInstance>;
}

export interface Approval {
  name: "Approval";
  args: {
    owner: string;
    spender: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface ClaimingPermissionUpdated {
  name: "ClaimingPermissionUpdated";
  args: {
    projectIds: BN[];
    disabled: boolean;
    0: BN[];
    1: boolean;
  };
}

export interface DistributionPermissionUpdated {
  name: "DistributionPermissionUpdated";
  args: {
    projectIds: BN[];
    disabled: boolean;
    0: BN[];
    1: boolean;
  };
}

export interface ProjectAdded {
  name: "ProjectAdded";
  args: {
    id: BN;
    name: string;
    distributor: string;
    currentMonthDistributionEnabled: boolean;
    0: BN;
    1: string;
    2: string;
    3: boolean;
  };
}

export interface ProjectUpdated {
  name: "ProjectUpdated";
  args: {
    id: BN;
    name: string;
    distributor: string;
    currentMonthDistributionEnabled: boolean;
    0: BN;
    1: string;
    2: string;
    3: boolean;
  };
}

export interface RNatAccountCreated {
  name: "RNatAccountCreated";
  args: {
    owner: string;
    rNatAccount: string;
    0: string;
    1: string;
  };
}

export interface RewardsAssigned {
  name: "RewardsAssigned";
  args: {
    projectId: BN;
    month: BN;
    amount: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface RewardsClaimed {
  name: "RewardsClaimed";
  args: {
    projectId: BN;
    month: BN;
    owner: string;
    amount: BN;
    0: BN;
    1: BN;
    2: string;
    3: BN;
  };
}

export interface RewardsDistributed {
  name: "RewardsDistributed";
  args: {
    projectId: BN;
    month: BN;
    recipients: string[];
    amounts: BN[];
    0: BN;
    1: BN;
    2: string[];
    3: BN[];
  };
}

export interface RewardsUnassigned {
  name: "RewardsUnassigned";
  args: {
    projectId: BN;
    month: BN;
    amount: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface Transfer {
  name: "Transfer";
  args: {
    from: string;
    to: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface UnassignedRewardsWithdrawn {
  name: "UnassignedRewardsWithdrawn";
  args: {
    recipient: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface UnclaimedRewardsUnassigned {
  name: "UnclaimedRewardsUnassigned";
  args: {
    projectId: BN;
    month: BN;
    amount: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

type AllEvents =
  | Approval
  | ClaimingPermissionUpdated
  | DistributionPermissionUpdated
  | ProjectAdded
  | ProjectUpdated
  | RNatAccountCreated
  | RewardsAssigned
  | RewardsClaimed
  | RewardsDistributed
  | RewardsUnassigned
  | Transfer
  | UnassignedRewardsWithdrawn
  | UnclaimedRewardsUnassigned;

export interface IRNatInstance extends Truffle.ContractInstance {
  allowance(
    owner: string,
    spender: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  approve: {
    (
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      spender: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  balanceOf(
    account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  claimRewards: {
    (
      _projectIds: (number | BN | string)[],
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _projectIds: (number | BN | string)[],
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _projectIds: (number | BN | string)[],
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _projectIds: (number | BN | string)[],
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  distributeRewards: {
    (
      _projectId: number | BN | string,
      _month: number | BN | string,
      _recipients: string[],
      _amountsWei: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _projectId: number | BN | string,
      _month: number | BN | string,
      _recipients: string[],
      _amountsWei: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _projectId: number | BN | string,
      _month: number | BN | string,
      _recipients: string[],
      _amountsWei: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _projectId: number | BN | string,
      _month: number | BN | string,
      _recipients: string[],
      _amountsWei: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  firstMonthStartTs(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getBalancesOf(
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getClaimableRewards(
    _projectId: number | BN | string,
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getCurrentMonth(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getOwnerRewardsInfo(
    _projectId: number | BN | string,
    _month: number | BN | string,
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: boolean }>;

  getProjectInfo(
    _projectId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: string;
    2: boolean;
    3: boolean;
    4: boolean;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
    9: BN[];
  }>;

  getProjectRewardsInfo(
    _projectId: number | BN | string,
    _month: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

  getProjectsBasicInfo(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: boolean[] }>;

  getProjectsCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getRNatAccount(
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getRewardsInfo(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN }>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  setClaimExecutors: {
    (_executors: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _executors: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _executors: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _executors: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transfer: {
    (
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferExternalToken: {
    (
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferFrom: {
    (
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      from: string,
      to: string,
      value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  wNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

  withdraw: {
    (
      _amount: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawAll: {
    (_wrap: boolean, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_wrap: boolean, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _wrap: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    allowance(
      owner: string,
      spender: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    approve: {
      (
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        spender: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    balanceOf(
      account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    claimRewards: {
      (
        _projectIds: (number | BN | string)[],
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _projectIds: (number | BN | string)[],
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _projectIds: (number | BN | string)[],
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _projectIds: (number | BN | string)[],
        _month: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    distributeRewards: {
      (
        _projectId: number | BN | string,
        _month: number | BN | string,
        _recipients: string[],
        _amountsWei: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _projectId: number | BN | string,
        _month: number | BN | string,
        _recipients: string[],
        _amountsWei: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _projectId: number | BN | string,
        _month: number | BN | string,
        _recipients: string[],
        _amountsWei: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _projectId: number | BN | string,
        _month: number | BN | string,
        _recipients: string[],
        _amountsWei: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    firstMonthStartTs(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getBalancesOf(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getClaimableRewards(
      _projectId: number | BN | string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrentMonth(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getOwnerRewardsInfo(
      _projectId: number | BN | string,
      _month: number | BN | string,
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: boolean }>;

    getProjectInfo(
      _projectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: string;
      2: boolean;
      3: boolean;
      4: boolean;
      5: BN;
      6: BN;
      7: BN;
      8: BN;
      9: BN[];
    }>;

    getProjectRewardsInfo(
      _projectId: number | BN | string,
      _month: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN }>;

    getProjectsBasicInfo(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: boolean[] }>;

    getProjectsCount(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getRNatAccount(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getRewardsInfo(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN }>;

    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    setClaimExecutors: {
      (_executors: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _executors: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _executors: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _executors: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    transfer: {
      (
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferExternalToken: {
      (
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferFrom: {
      (
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        from: string,
        to: string,
        value: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    wNat(txDetails?: Truffle.TransactionDetails): Promise<string>;

    withdraw: {
      (
        _amount: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawAll: {
      (_wrap: boolean, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _wrap: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
