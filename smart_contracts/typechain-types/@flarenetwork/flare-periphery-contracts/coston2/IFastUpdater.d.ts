/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFastUpdaterContract
  extends Truffle.Contract<IFastUpdaterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IFastUpdaterInstance>;
}

export interface FastUpdateFeedRemoved {
  name: "FastUpdateFeedRemoved";
  args: {
    index: BN;
    0: BN;
  };
}

export interface FastUpdateFeedReset {
  name: "FastUpdateFeedReset";
  args: {
    votingRoundId: BN;
    index: BN;
    id: string;
    value: BN;
    decimals: BN;
    0: BN;
    1: BN;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface FastUpdateFeeds {
  name: "FastUpdateFeeds";
  args: {
    votingEpochId: BN;
    feeds: BN[];
    decimals: BN[];
    0: BN;
    1: BN[];
    2: BN[];
  };
}

export interface FastUpdateFeedsSubmitted {
  name: "FastUpdateFeedsSubmitted";
  args: {
    votingRoundId: BN;
    signingPolicyAddress: string;
    0: BN;
    1: string;
  };
}

type AllEvents =
  | FastUpdateFeedRemoved
  | FastUpdateFeedReset
  | FastUpdateFeeds
  | FastUpdateFeedsSubmitted;

export interface IFastUpdaterInstance extends Truffle.ContractInstance {
  blockScoreCutoff(
    _blockNum: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  currentRewardEpochId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  currentScoreCutoff(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  currentSortitionWeight(
    _signingPolicyAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  fetchAllCurrentFeeds: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: BN[]; 2: BN[]; 3: BN }>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  fetchCurrentFeeds: {
    (
      _indices: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _indices: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN[]; 1: BN[]; 2: BN }>;
    sendTransaction(
      _indices: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _indices: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  numberOfUpdates(
    _historySize: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  numberOfUpdatesInBlock(
    _blockNumber: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  submissionWindow(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  submitUpdates: {
    (
      _updates: {
        sortitionBlock: number | BN | string;
        sortitionCredential: {
          replicate: number | BN | string;
          gamma: { x: number | BN | string; y: number | BN | string };
          c: number | BN | string;
          s: number | BN | string;
        };
        deltas: string;
        signature: { v: number | BN | string; r: string; s: string };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _updates: {
        sortitionBlock: number | BN | string;
        sortitionCredential: {
          replicate: number | BN | string;
          gamma: { x: number | BN | string; y: number | BN | string };
          c: number | BN | string;
          s: number | BN | string;
        };
        deltas: string;
        signature: { v: number | BN | string; r: string; s: string };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _updates: {
        sortitionBlock: number | BN | string;
        sortitionCredential: {
          replicate: number | BN | string;
          gamma: { x: number | BN | string; y: number | BN | string };
          c: number | BN | string;
          s: number | BN | string;
        };
        deltas: string;
        signature: { v: number | BN | string; r: string; s: string };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _updates: {
        sortitionBlock: number | BN | string;
        sortitionCredential: {
          replicate: number | BN | string;
          gamma: { x: number | BN | string; y: number | BN | string };
          c: number | BN | string;
          s: number | BN | string;
        };
        deltas: string;
        signature: { v: number | BN | string; r: string; s: string };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    blockScoreCutoff(
      _blockNum: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    currentRewardEpochId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    currentScoreCutoff(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    currentSortitionWeight(
      _signingPolicyAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    fetchAllCurrentFeeds: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: string[]; 1: BN[]; 2: BN[]; 3: BN }>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    fetchCurrentFeeds: {
      (
        _indices: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _indices: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN[]; 1: BN[]; 2: BN }>;
      sendTransaction(
        _indices: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _indices: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    numberOfUpdates(
      _historySize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    numberOfUpdatesInBlock(
      _blockNumber: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    submissionWindow(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    submitUpdates: {
      (
        _updates: {
          sortitionBlock: number | BN | string;
          sortitionCredential: {
            replicate: number | BN | string;
            gamma: { x: number | BN | string; y: number | BN | string };
            c: number | BN | string;
            s: number | BN | string;
          };
          deltas: string;
          signature: { v: number | BN | string; r: string; s: string };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _updates: {
          sortitionBlock: number | BN | string;
          sortitionCredential: {
            replicate: number | BN | string;
            gamma: { x: number | BN | string; y: number | BN | string };
            c: number | BN | string;
            s: number | BN | string;
          };
          deltas: string;
          signature: { v: number | BN | string; r: string; s: string };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _updates: {
          sortitionBlock: number | BN | string;
          sortitionCredential: {
            replicate: number | BN | string;
            gamma: { x: number | BN | string; y: number | BN | string };
            c: number | BN | string;
            s: number | BN | string;
          };
          deltas: string;
          signature: { v: number | BN | string; r: string; s: string };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _updates: {
          sortitionBlock: number | BN | string;
          sortitionCredential: {
            replicate: number | BN | string;
            gamma: { x: number | BN | string; y: number | BN | string };
            c: number | BN | string;
            s: number | BN | string;
          };
          deltas: string;
          signature: { v: number | BN | string; r: string; s: string };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
