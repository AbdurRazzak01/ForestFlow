/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IValidatorRegistryContract
  extends Truffle.Contract<IValidatorRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IValidatorRegistryInstance>;
}

export interface DataProviderRegistered {
  name: "DataProviderRegistered";
  args: {
    dataProvider: string;
    nodeId: string;
    pChainPublicKey: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface DataProviderUnregistered {
  name: "DataProviderUnregistered";
  args: {
    dataProvider: string;
    0: string;
  };
}

type AllEvents = DataProviderRegistered | DataProviderUnregistered;

export interface IValidatorRegistryInstance extends Truffle.ContractInstance {
  getDataProviderForNodeId(
    _nodeId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getDataProviderForPChainPublicKey(
    _pChainPublicKey: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getDataProviderInfo(
    _dataProvider: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string }>;

  registerDataProvider: {
    (
      _nodeId: string,
      _pChainPublicKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _nodeId: string,
      _pChainPublicKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _nodeId: string,
      _pChainPublicKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _nodeId: string,
      _pChainPublicKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unregisterDataProvider: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  methods: {
    getDataProviderForNodeId(
      _nodeId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getDataProviderForPChainPublicKey(
      _pChainPublicKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getDataProviderInfo(
      _dataProvider: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string }>;

    registerDataProvider: {
      (
        _nodeId: string,
        _pChainPublicKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _nodeId: string,
        _pChainPublicKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _nodeId: string,
        _pChainPublicKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _nodeId: string,
        _pChainPublicKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    unregisterDataProvider: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
