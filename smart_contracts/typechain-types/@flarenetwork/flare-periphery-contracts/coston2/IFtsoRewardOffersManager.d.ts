/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFtsoRewardOffersManagerContract
  extends Truffle.Contract<IFtsoRewardOffersManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IFtsoRewardOffersManagerInstance>;
}

export interface InflationRewardsOffered {
  name: "InflationRewardsOffered";
  args: {
    rewardEpochId: BN;
    feedIds: string;
    decimals: string;
    amount: BN;
    minRewardedTurnoutBIPS: BN;
    primaryBandRewardSharePPM: BN;
    secondaryBandWidthPPMs: string;
    mode: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: string;
    7: BN;
  };
}

export interface MinimalRewardsOfferValueSet {
  name: "MinimalRewardsOfferValueSet";
  args: {
    valueWei: BN;
    0: BN;
  };
}

export interface RewardsOffered {
  name: "RewardsOffered";
  args: {
    rewardEpochId: BN;
    feedId: string;
    decimals: BN;
    amount: BN;
    minRewardedTurnoutBIPS: BN;
    primaryBandRewardSharePPM: BN;
    secondaryBandWidthPPM: BN;
    claimBackAddress: string;
    0: BN;
    1: string;
    2: BN;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: string;
  };
}

type AllEvents =
  | InflationRewardsOffered
  | MinimalRewardsOfferValueSet
  | RewardsOffered;

export interface IFtsoRewardOffersManagerInstance
  extends Truffle.ContractInstance {
  minimalRewardsOfferValueWei(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  offerRewards: {
    (
      _nextRewardEpochId: number | BN | string,
      _offers: {
        amount: number | BN | string;
        feedId: string;
        minRewardedTurnoutBIPS: number | BN | string;
        primaryBandRewardSharePPM: number | BN | string;
        secondaryBandWidthPPM: number | BN | string;
        claimBackAddress: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _nextRewardEpochId: number | BN | string,
      _offers: {
        amount: number | BN | string;
        feedId: string;
        minRewardedTurnoutBIPS: number | BN | string;
        primaryBandRewardSharePPM: number | BN | string;
        secondaryBandWidthPPM: number | BN | string;
        claimBackAddress: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _nextRewardEpochId: number | BN | string,
      _offers: {
        amount: number | BN | string;
        feedId: string;
        minRewardedTurnoutBIPS: number | BN | string;
        primaryBandRewardSharePPM: number | BN | string;
        secondaryBandWidthPPM: number | BN | string;
        claimBackAddress: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _nextRewardEpochId: number | BN | string,
      _offers: {
        amount: number | BN | string;
        feedId: string;
        minRewardedTurnoutBIPS: number | BN | string;
        primaryBandRewardSharePPM: number | BN | string;
        secondaryBandWidthPPM: number | BN | string;
        claimBackAddress: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    minimalRewardsOfferValueWei(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    offerRewards: {
      (
        _nextRewardEpochId: number | BN | string,
        _offers: {
          amount: number | BN | string;
          feedId: string;
          minRewardedTurnoutBIPS: number | BN | string;
          primaryBandRewardSharePPM: number | BN | string;
          secondaryBandWidthPPM: number | BN | string;
          claimBackAddress: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _nextRewardEpochId: number | BN | string,
        _offers: {
          amount: number | BN | string;
          feedId: string;
          minRewardedTurnoutBIPS: number | BN | string;
          primaryBandRewardSharePPM: number | BN | string;
          secondaryBandWidthPPM: number | BN | string;
          claimBackAddress: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _nextRewardEpochId: number | BN | string,
        _offers: {
          amount: number | BN | string;
          feedId: string;
          minRewardedTurnoutBIPS: number | BN | string;
          primaryBandRewardSharePPM: number | BN | string;
          secondaryBandWidthPPM: number | BN | string;
          claimBackAddress: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _nextRewardEpochId: number | BN | string,
        _offers: {
          amount: number | BN | string;
          feedId: string;
          minRewardedTurnoutBIPS: number | BN | string;
          primaryBandRewardSharePPM: number | BN | string;
          secondaryBandWidthPPM: number | BN | string;
          claimBackAddress: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
