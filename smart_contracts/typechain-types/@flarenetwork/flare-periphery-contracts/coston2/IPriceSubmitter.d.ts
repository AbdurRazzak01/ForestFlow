/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IPriceSubmitterContract
  extends Truffle.Contract<IPriceSubmitterInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IPriceSubmitterInstance>;
}

export interface HashSubmitted {
  name: "HashSubmitted";
  args: {
    submitter: string;
    epochId: BN;
    hash: string;
    timestamp: BN;
    0: string;
    1: BN;
    2: string;
    3: BN;
  };
}

export interface PricesRevealed {
  name: "PricesRevealed";
  args: {
    voter: string;
    epochId: BN;
    ftsos: string[];
    prices: BN[];
    random: BN;
    timestamp: BN;
    0: string;
    1: BN;
    2: string[];
    3: BN[];
    4: BN;
    5: BN;
  };
}

type AllEvents = HashSubmitted | PricesRevealed;

export interface IPriceSubmitterInstance extends Truffle.ContractInstance {
  getCurrentRandom(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getFtsoManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getFtsoRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getRandom(
    _epochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getVoterWhitelister(txDetails?: Truffle.TransactionDetails): Promise<string>;

  revealPrices: {
    (
      _epochId: number | BN | string,
      _ftsoIndices: (number | BN | string)[],
      _prices: (number | BN | string)[],
      _random: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _epochId: number | BN | string,
      _ftsoIndices: (number | BN | string)[],
      _prices: (number | BN | string)[],
      _random: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _epochId: number | BN | string,
      _ftsoIndices: (number | BN | string)[],
      _prices: (number | BN | string)[],
      _random: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _epochId: number | BN | string,
      _ftsoIndices: (number | BN | string)[],
      _prices: (number | BN | string)[],
      _random: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitHash: {
    (
      _epochId: number | BN | string,
      _hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _epochId: number | BN | string,
      _hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _epochId: number | BN | string,
      _hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _epochId: number | BN | string,
      _hash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  voterWhitelistBitmap(
    _voter: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    getCurrentRandom(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getFtsoManager(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getFtsoRegistry(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getRandom(
      _epochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getVoterWhitelister(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    revealPrices: {
      (
        _epochId: number | BN | string,
        _ftsoIndices: (number | BN | string)[],
        _prices: (number | BN | string)[],
        _random: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _epochId: number | BN | string,
        _ftsoIndices: (number | BN | string)[],
        _prices: (number | BN | string)[],
        _random: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _epochId: number | BN | string,
        _ftsoIndices: (number | BN | string)[],
        _prices: (number | BN | string)[],
        _random: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _epochId: number | BN | string,
        _ftsoIndices: (number | BN | string)[],
        _prices: (number | BN | string)[],
        _random: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    submitHash: {
      (
        _epochId: number | BN | string,
        _hash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _epochId: number | BN | string,
        _hash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _epochId: number | BN | string,
        _hash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _epochId: number | BN | string,
        _hash: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    voterWhitelistBitmap(
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
