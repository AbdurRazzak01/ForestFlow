/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFtsoInflationConfigurationsContract
  extends Truffle.Contract<IFtsoInflationConfigurationsInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IFtsoInflationConfigurationsInstance>;
}

type AllEvents = never;

export interface IFtsoInflationConfigurationsInstance
  extends Truffle.ContractInstance {
  getFtsoConfiguration(
    _index: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    feedIds: string;
    inflationShare: BN;
    minRewardedTurnoutBIPS: BN;
    primaryBandRewardSharePPM: BN;
    secondaryBandWidthPPMs: string;
    mode: BN;
  }>;

  getFtsoConfigurations(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      feedIds: string;
      inflationShare: BN;
      minRewardedTurnoutBIPS: BN;
      primaryBandRewardSharePPM: BN;
      secondaryBandWidthPPMs: string;
      mode: BN;
    }[]
  >;

  methods: {
    getFtsoConfiguration(
      _index: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      feedIds: string;
      inflationShare: BN;
      minRewardedTurnoutBIPS: BN;
      primaryBandRewardSharePPM: BN;
      secondaryBandWidthPPMs: string;
      mode: BN;
    }>;

    getFtsoConfigurations(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        feedIds: string;
        inflationShare: BN;
        minRewardedTurnoutBIPS: BN;
        primaryBandRewardSharePPM: BN;
        secondaryBandWidthPPMs: string;
        mode: BN;
      }[]
    >;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
