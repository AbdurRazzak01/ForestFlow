/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFlareSystemsManagerContract
  extends Truffle.Contract<IFlareSystemsManagerInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IFlareSystemsManagerInstance>;
}

export interface RandomAcquisitionStarted {
  name: "RandomAcquisitionStarted";
  args: {
    rewardEpochId: BN;
    timestamp: BN;
    0: BN;
    1: BN;
  };
}

export interface RewardEpochStarted {
  name: "RewardEpochStarted";
  args: {
    rewardEpochId: BN;
    startVotingRoundId: BN;
    timestamp: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

export interface RewardsSigned {
  name: "RewardsSigned";
  args: {
    rewardEpochId: BN;
    signingPolicyAddress: string;
    voter: string;
    rewardsHash: string;
    noOfWeightBasedClaims: { rewardManagerId: BN; noOfWeightBasedClaims: BN }[];
    timestamp: BN;
    thresholdReached: boolean;
    0: BN;
    1: string;
    2: string;
    3: string;
    4: { rewardManagerId: BN; noOfWeightBasedClaims: BN }[];
    5: BN;
    6: boolean;
  };
}

export interface SignUptimeVoteEnabled {
  name: "SignUptimeVoteEnabled";
  args: {
    rewardEpochId: BN;
    timestamp: BN;
    0: BN;
    1: BN;
  };
}

export interface SigningPolicySigned {
  name: "SigningPolicySigned";
  args: {
    rewardEpochId: BN;
    signingPolicyAddress: string;
    voter: string;
    timestamp: BN;
    thresholdReached: boolean;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: boolean;
  };
}

export interface UptimeVoteSigned {
  name: "UptimeVoteSigned";
  args: {
    rewardEpochId: BN;
    signingPolicyAddress: string;
    voter: string;
    uptimeVoteHash: string;
    timestamp: BN;
    thresholdReached: boolean;
    0: BN;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: boolean;
  };
}

export interface UptimeVoteSubmitted {
  name: "UptimeVoteSubmitted";
  args: {
    rewardEpochId: BN;
    signingPolicyAddress: string;
    voter: string;
    nodeIds: string[];
    timestamp: BN;
    0: BN;
    1: string;
    2: string;
    3: string[];
    4: BN;
  };
}

export interface VotePowerBlockSelected {
  name: "VotePowerBlockSelected";
  args: {
    rewardEpochId: BN;
    votePowerBlock: BN;
    timestamp: BN;
    0: BN;
    1: BN;
    2: BN;
  };
}

type AllEvents =
  | RandomAcquisitionStarted
  | RewardEpochStarted
  | RewardsSigned
  | SignUptimeVoteEnabled
  | SigningPolicySigned
  | UptimeVoteSigned
  | UptimeVoteSubmitted
  | VotePowerBlockSelected;

export interface IFlareSystemsManagerInstance extends Truffle.ContractInstance {
  firstRewardEpochStartTs(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  firstVotingRoundStartTs(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentRewardEpoch(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentRewardEpochId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentVotingEpochId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getSeed(
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getStartVotingRoundId(
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getThreshold(
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getVotePowerBlock(
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getVoterRegistrationData(
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: boolean }>;

  isVoterRegistrationEnabled(
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  rewardEpochDurationSeconds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  signNewSigningPolicy: {
    (
      _rewardEpochId: number | BN | string,
      _newSigningPolicyHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardEpochId: number | BN | string,
      _newSigningPolicyHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardEpochId: number | BN | string,
      _newSigningPolicyHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardEpochId: number | BN | string,
      _newSigningPolicyHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  signRewards: {
    (
      _rewardEpochId: number | BN | string,
      _noOfWeightBasedClaims: {
        rewardManagerId: number | BN | string;
        noOfWeightBasedClaims: number | BN | string;
      }[],
      _rewardsHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardEpochId: number | BN | string,
      _noOfWeightBasedClaims: {
        rewardManagerId: number | BN | string;
        noOfWeightBasedClaims: number | BN | string;
      }[],
      _rewardsHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardEpochId: number | BN | string,
      _noOfWeightBasedClaims: {
        rewardManagerId: number | BN | string;
        noOfWeightBasedClaims: number | BN | string;
      }[],
      _rewardsHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardEpochId: number | BN | string,
      _noOfWeightBasedClaims: {
        rewardManagerId: number | BN | string;
        noOfWeightBasedClaims: number | BN | string;
      }[],
      _rewardsHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  signUptimeVote: {
    (
      _rewardEpochId: number | BN | string,
      _uptimeVoteHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardEpochId: number | BN | string,
      _uptimeVoteHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardEpochId: number | BN | string,
      _uptimeVoteHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardEpochId: number | BN | string,
      _uptimeVoteHash: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  submitUptimeVote: {
    (
      _rewardEpochId: number | BN | string,
      _nodeIds: string[],
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _rewardEpochId: number | BN | string,
      _nodeIds: string[],
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _rewardEpochId: number | BN | string,
      _nodeIds: string[],
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _rewardEpochId: number | BN | string,
      _nodeIds: string[],
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  votingEpochDurationSeconds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    firstRewardEpochStartTs(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    firstVotingRoundStartTs(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrentRewardEpoch(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCurrentRewardEpochId(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getCurrentVotingEpochId(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getSeed(
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getStartVotingRoundId(
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getThreshold(
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getVotePowerBlock(
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getVoterRegistrationData(
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: boolean }>;

    isVoterRegistrationEnabled(
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    rewardEpochDurationSeconds(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    signNewSigningPolicy: {
      (
        _rewardEpochId: number | BN | string,
        _newSigningPolicyHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardEpochId: number | BN | string,
        _newSigningPolicyHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardEpochId: number | BN | string,
        _newSigningPolicyHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardEpochId: number | BN | string,
        _newSigningPolicyHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    signRewards: {
      (
        _rewardEpochId: number | BN | string,
        _noOfWeightBasedClaims: {
          rewardManagerId: number | BN | string;
          noOfWeightBasedClaims: number | BN | string;
        }[],
        _rewardsHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardEpochId: number | BN | string,
        _noOfWeightBasedClaims: {
          rewardManagerId: number | BN | string;
          noOfWeightBasedClaims: number | BN | string;
        }[],
        _rewardsHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardEpochId: number | BN | string,
        _noOfWeightBasedClaims: {
          rewardManagerId: number | BN | string;
          noOfWeightBasedClaims: number | BN | string;
        }[],
        _rewardsHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardEpochId: number | BN | string,
        _noOfWeightBasedClaims: {
          rewardManagerId: number | BN | string;
          noOfWeightBasedClaims: number | BN | string;
        }[],
        _rewardsHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    signUptimeVote: {
      (
        _rewardEpochId: number | BN | string,
        _uptimeVoteHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardEpochId: number | BN | string,
        _uptimeVoteHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardEpochId: number | BN | string,
        _uptimeVoteHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardEpochId: number | BN | string,
        _uptimeVoteHash: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    submitUptimeVote: {
      (
        _rewardEpochId: number | BN | string,
        _nodeIds: string[],
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _rewardEpochId: number | BN | string,
        _nodeIds: string[],
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _rewardEpochId: number | BN | string,
        _nodeIds: string[],
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _rewardEpochId: number | BN | string,
        _nodeIds: string[],
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    votingEpochDurationSeconds(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
