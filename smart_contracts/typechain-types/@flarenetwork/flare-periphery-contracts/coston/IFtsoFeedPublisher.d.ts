/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFtsoFeedPublisherContract
  extends Truffle.Contract<IFtsoFeedPublisherInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IFtsoFeedPublisherInstance>;
}

export interface FtsoFeedPublished {
  name: "FtsoFeedPublished";
  args: {
    votingRoundId: BN;
    id: string;
    value: BN;
    turnoutBIPS: BN;
    decimals: BN;
    0: BN;
    1: string;
    2: BN;
    3: BN;
    4: BN;
  };
}

type AllEvents = FtsoFeedPublished;

export interface IFtsoFeedPublisherInstance extends Truffle.ContractInstance {
  feedsHistorySize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  ftsoProtocolId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getCurrentFeed(
    _feedId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    votingRoundId: BN;
    id: string;
    value: BN;
    turnoutBIPS: BN;
    decimals: BN;
  }>;

  getFeed(
    _feedId: string,
    _votingRoundId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    votingRoundId: BN;
    id: string;
    value: BN;
    turnoutBIPS: BN;
    decimals: BN;
  }>;

  publish: {
    (
      _proofs: {
        merkleProof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proofs: {
        merkleProof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proofs: {
        merkleProof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proofs: {
        merkleProof: string[];
        body: {
          votingRoundId: number | BN | string;
          id: string;
          value: number | BN | string;
          turnoutBIPS: number | BN | string;
          decimals: number | BN | string;
        };
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    feedsHistorySize(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    ftsoProtocolId(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getCurrentFeed(
      _feedId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      votingRoundId: BN;
      id: string;
      value: BN;
      turnoutBIPS: BN;
      decimals: BN;
    }>;

    getFeed(
      _feedId: string,
      _votingRoundId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      votingRoundId: BN;
      id: string;
      value: BN;
      turnoutBIPS: BN;
      decimals: BN;
    }>;

    publish: {
      (
        _proofs: {
          merkleProof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proofs: {
          merkleProof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proofs: {
          merkleProof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proofs: {
          merkleProof: string[];
          body: {
            votingRoundId: number | BN | string;
            id: string;
            value: number | BN | string;
            turnoutBIPS: number | BN | string;
            decimals: number | BN | string;
          };
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
