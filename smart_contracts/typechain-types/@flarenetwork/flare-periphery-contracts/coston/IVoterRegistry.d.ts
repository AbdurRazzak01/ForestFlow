/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IVoterRegistryContract
  extends Truffle.Contract<IVoterRegistryInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IVoterRegistryInstance>;
}

export interface BeneficiaryChilled {
  name: "BeneficiaryChilled";
  args: {
    beneficiary: string;
    untilRewardEpochId: BN;
    0: string;
    1: BN;
  };
}

export interface VoterRegistered {
  name: "VoterRegistered";
  args: {
    voter: string;
    rewardEpochId: BN;
    signingPolicyAddress: string;
    submitAddress: string;
    submitSignaturesAddress: string;
    publicKeyPart1: string;
    publicKeyPart2: string;
    registrationWeight: BN;
    0: string;
    1: BN;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: BN;
  };
}

export interface VoterRemoved {
  name: "VoterRemoved";
  args: {
    voter: string;
    rewardEpochId: BN;
    0: string;
    1: BN;
  };
}

type AllEvents = BeneficiaryChilled | VoterRegistered | VoterRemoved;

export interface IVoterRegistryInstance extends Truffle.ContractInstance {
  chilledUntilRewardEpochId(
    _beneficiary: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getNumberOfRegisteredVoters(
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getRegisteredVoters(
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  isVoterRegistered(
    _voter: string,
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  maxVoters(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  newSigningPolicyInitializationStartBlockNumber(
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  publicKeyRequired(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  registerVoter: {
    (
      _voter: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _voter: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _voter: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _voter: string,
      _signature: { v: number | BN | string; r: string; s: string },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    chilledUntilRewardEpochId(
      _beneficiary: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getNumberOfRegisteredVoters(
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getRegisteredVoters(
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    isVoterRegistered(
      _voter: string,
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    maxVoters(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    newSigningPolicyInitializationStartBlockNumber(
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    publicKeyRequired(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    registerVoter: {
      (
        _voter: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _voter: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _voter: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _voter: string,
        _signature: { v: number | BN | string; r: string; s: string },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
