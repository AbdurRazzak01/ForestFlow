/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IWNatDelegationFeeContract
  extends Truffle.Contract<IWNatDelegationFeeInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IWNatDelegationFeeInstance>;
}

export interface FeePercentageChanged {
  name: "FeePercentageChanged";
  args: {
    voter: string;
    value: BN;
    validFromEpochId: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

type AllEvents = FeePercentageChanged;

export interface IWNatDelegationFeeInstance extends Truffle.ContractInstance {
  defaultFeePercentageBIPS(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  feePercentageUpdateOffset(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getVoterCurrentFeePercentage(
    _voter: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getVoterFeePercentage(
    _voter: string,
    _rewardEpochId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getVoterScheduledFeePercentageChanges(
    _voter: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN[]; 1: BN[]; 2: boolean[] }>;

  setVoterFeePercentage: {
    (
      _feePercentageBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _feePercentageBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _feePercentageBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _feePercentageBIPS: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    defaultFeePercentageBIPS(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    feePercentageUpdateOffset(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getVoterCurrentFeePercentage(
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getVoterFeePercentage(
      _voter: string,
      _rewardEpochId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getVoterScheduledFeePercentageChanges(
      _voter: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN[]; 1: BN[]; 2: boolean[] }>;

    setVoterFeePercentage: {
      (
        _feePercentageBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _feePercentageBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _feePercentageBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _feePercentageBIPS: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
