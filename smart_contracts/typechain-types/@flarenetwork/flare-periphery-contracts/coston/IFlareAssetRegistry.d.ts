/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IFlareAssetRegistryContract
  extends Truffle.Contract<IFlareAssetRegistryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IFlareAssetRegistryInstance>;
}

type AllEvents = never;

export interface IFlareAssetRegistryInstance extends Truffle.ContractInstance {
  allAssetTypes(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  allAssets(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  allAssetsOfType(
    _assetType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  allAssetsOfTypeWithSymbols(
    _assetType: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: string[] }>;

  allAssetsWithSymbols(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string[]; 1: string[] }>;

  assetBySymbol(
    symbol: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  assetType(
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAttribute(
    token: string,
    nameHash: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: boolean; 1: string }>;

  incentivePoolFor(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isFlareAsset(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  maxDelegatesByPercent(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  supportsFtsoDelegation(
    token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  methods: {
    allAssetTypes(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    allAssets(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

    allAssetsOfType(
      _assetType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    allAssetsOfTypeWithSymbols(
      _assetType: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: string[] }>;

    allAssetsWithSymbols(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string[]; 1: string[] }>;

    assetBySymbol(
      symbol: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    assetType(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getAttribute(
      token: string,
      nameHash: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: boolean; 1: string }>;

    incentivePoolFor(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    isFlareAsset(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    maxDelegatesByPercent(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    supportsFtsoDelegation(
      token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
