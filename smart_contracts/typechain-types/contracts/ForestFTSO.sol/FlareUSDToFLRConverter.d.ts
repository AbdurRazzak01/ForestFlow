/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FlareUSDToFLRConverterContract
  extends Truffle.Contract<FlareUSDToFLRConverterInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<FlareUSDToFLRConverterInstance>;
}

type AllEvents = never;

export interface FlareUSDToFLRConverterInstance
  extends Truffle.ContractInstance {
  convertUsdToFlr(
    usdAmount: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  flrUsdId(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getAvailablePriceFeedNames(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getAvailablePriceFeeds(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string[]>;

  getFeedPrice(
    feedId: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getFeedPriceByName(
    feedName: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  getFlrUsdPrice(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN }>;

  methods: {
    convertUsdToFlr(
      usdAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    flrUsdId(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getAvailablePriceFeedNames(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getAvailablePriceFeeds(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    getFeedPrice(
      feedId: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getFeedPriceByName(
      feedName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;

    getFlrUsdPrice(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
