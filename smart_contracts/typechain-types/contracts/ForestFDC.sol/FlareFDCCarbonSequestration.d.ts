/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FlareFDCCarbonSequestrationContract
  extends Truffle.Contract<FlareFDCCarbonSequestrationInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<FlareFDCCarbonSequestrationInstance>;
}

type AllEvents = never;

export interface FlareFDCCarbonSequestrationInstance
  extends Truffle.ContractInstance {
  addCarbonProject: {
    (
      data: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            postprocessJq: string;
            abi_signature: string;
          };
          responseBody: { abi_encoded_data: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      data: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            postprocessJq: string;
            abi_signature: string;
          };
          responseBody: { abi_encoded_data: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      data: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            postprocessJq: string;
            abi_signature: string;
          };
          responseBody: { abi_encoded_data: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      data: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            postprocessJq: string;
            abi_signature: string;
          };
          responseBody: { abi_encoded_data: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  carbonProjects(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: BN; 3: BN; 4: boolean }>;

  getAllCarbonProjects(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    {
      projectName: string;
      location: string;
      estimatedSequestration: BN;
      apiUid: BN;
      verified: boolean;
    }[]
  >;

  getFdcHub(txDetails?: Truffle.TransactionDetails): Promise<string>;

  getFdcRequestFeeConfigurations(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  isJsonApiProofValid(
    _proof: {
      merkleProof: string[];
      data: {
        attestationType: string;
        sourceId: string;
        votingRound: number | BN | string;
        lowestUsedTimestamp: number | BN | string;
        requestBody: {
          url: string;
          postprocessJq: string;
          abi_signature: string;
        };
        responseBody: { abi_encoded_data: string };
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  projectIds(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    addCarbonProject: {
      (
        data: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              url: string;
              postprocessJq: string;
              abi_signature: string;
            };
            responseBody: { abi_encoded_data: string };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        data: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              url: string;
              postprocessJq: string;
              abi_signature: string;
            };
            responseBody: { abi_encoded_data: string };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        data: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              url: string;
              postprocessJq: string;
              abi_signature: string;
            };
            responseBody: { abi_encoded_data: string };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        data: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              url: string;
              postprocessJq: string;
              abi_signature: string;
            };
            responseBody: { abi_encoded_data: string };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    carbonProjects(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: BN; 3: BN; 4: boolean }>;

    getAllCarbonProjects(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      {
        projectName: string;
        location: string;
        estimatedSequestration: BN;
        apiUid: BN;
        verified: boolean;
      }[]
    >;

    getFdcHub(txDetails?: Truffle.TransactionDetails): Promise<string>;

    getFdcRequestFeeConfigurations(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    isJsonApiProofValid(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            postprocessJq: string;
            abi_signature: string;
          };
          responseBody: { abi_encoded_data: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    projectIds(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
