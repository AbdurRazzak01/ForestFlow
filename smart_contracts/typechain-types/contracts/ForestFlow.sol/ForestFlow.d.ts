/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ForestFlowContract
  extends Truffle.Contract<ForestFlowInstance> {
  "new"(
    _forestToken: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ForestFlowInstance>;
}

export interface CarbonTokenBought {
  name: "CarbonTokenBought";
  args: {
    buyer: string;
    tokenAmount: BN;
    0: string;
    1: BN;
  };
}

export interface InvestmentMade {
  name: "InvestmentMade";
  args: {
    projectId: BN;
    investor: string;
    amount: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface ProjectListed {
  name: "ProjectListed";
  args: {
    projectId: BN;
    projectName: string;
    projectLocation: string;
    estimatedCO2: BN;
    minInvestment: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface UserRegistered {
  name: "UserRegistered";
  args: {
    user: string;
    name: string;
    email: string;
    0: string;
    1: string;
    2: string;
  };
}

type AllEvents =
  | CarbonTokenBought
  | InvestmentMade
  | OwnershipTransferred
  | ProjectListed
  | UserRegistered;

export interface ForestFlowInstance extends Truffle.ContractInstance {
  buyCarbonToken: {
    (
      tokenAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  carbonTokenBalance(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  carbonTokenPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  forestToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  investInProject: {
    (
      projectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      projectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      projectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      projectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  listProject: {
    (
      projectName: string,
      projectLocation: string,
      estimatedCO2: number | BN | string,
      minInvestment: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      projectName: string,
      projectLocation: string,
      estimatedCO2: number | BN | string,
      minInvestment: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      projectName: string,
      projectLocation: string,
      estimatedCO2: number | BN | string,
      minInvestment: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      projectName: string,
      projectLocation: string,
      estimatedCO2: number | BN | string,
      minInvestment: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  projectCounter(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  projects(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: BN; 3: BN; 4: string }>;

  registerUser: {
    (
      name: string,
      email: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      name: string,
      email: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      email: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      email: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  registrationReward(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  users(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: boolean }>;

  methods: {
    buyCarbonToken: {
      (
        tokenAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    carbonTokenBalance(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    carbonTokenPrice(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    forestToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    investInProject: {
      (
        projectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        projectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        projectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        projectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    listProject: {
      (
        projectName: string,
        projectLocation: string,
        estimatedCO2: number | BN | string,
        minInvestment: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        projectName: string,
        projectLocation: string,
        estimatedCO2: number | BN | string,
        minInvestment: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        projectName: string,
        projectLocation: string,
        estimatedCO2: number | BN | string,
        minInvestment: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        projectName: string,
        projectLocation: string,
        estimatedCO2: number | BN | string,
        minInvestment: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    projectCounter(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    projects(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: BN; 3: BN; 4: string }>;

    registerUser: {
      (
        name: string,
        email: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        name: string,
        email: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        name: string,
        email: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        name: string,
        email: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    registrationReward(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    users(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: boolean }>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
