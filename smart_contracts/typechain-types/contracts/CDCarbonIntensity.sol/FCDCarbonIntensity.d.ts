/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface FCDCarbonIntensityContract
  extends Truffle.Contract<FCDCarbonIntensityInstance> {
  "new"(
    initialOwner: string,
    meta?: Truffle.TransactionDetails
  ): Promise<FCDCarbonIntensityInstance>;
}

export interface CarbonIntensityAdded {
  name: "CarbonIntensityAdded";
  args: {
    timestamp: BN;
    intensity: BN;
    verified: boolean;
    0: BN;
    1: BN;
    2: boolean;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

type AllEvents = CarbonIntensityAdded | OwnershipTransferred;

export interface FCDCarbonIntensityInstance extends Truffle.ContractInstance {
  addCarbonIntensity: {
    (
      proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            postprocessJq: string;
            abi_signature: string;
          };
          responseBody: { abi_encoded_data: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            postprocessJq: string;
            abi_signature: string;
          };
          responseBody: { abi_encoded_data: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            postprocessJq: string;
            abi_signature: string;
          };
          responseBody: { abi_encoded_data: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            postprocessJq: string;
            abi_signature: string;
          };
          responseBody: { abi_encoded_data: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLatestCarbonIntensity(
    count: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ timestamp: BN; intensity: BN; verified: boolean }[]>;

  getVerificationHub(txDetails?: Truffle.TransactionDetails): Promise<string>;

  intensityRecords(
    arg0: number | BN | string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: boolean }>;

  isJsonApiProofValid(
    _proof: {
      merkleProof: string[];
      data: {
        attestationType: string;
        sourceId: string;
        votingRound: number | BN | string;
        lowestUsedTimestamp: number | BN | string;
        requestBody: {
          url: string;
          postprocessJq: string;
          abi_signature: string;
        };
        responseBody: { abi_encoded_data: string };
      };
    },
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  recordTimestamps(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addCarbonIntensity: {
      (
        proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              url: string;
              postprocessJq: string;
              abi_signature: string;
            };
            responseBody: { abi_encoded_data: string };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              url: string;
              postprocessJq: string;
              abi_signature: string;
            };
            responseBody: { abi_encoded_data: string };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              url: string;
              postprocessJq: string;
              abi_signature: string;
            };
            responseBody: { abi_encoded_data: string };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        proof: {
          merkleProof: string[];
          data: {
            attestationType: string;
            sourceId: string;
            votingRound: number | BN | string;
            lowestUsedTimestamp: number | BN | string;
            requestBody: {
              url: string;
              postprocessJq: string;
              abi_signature: string;
            };
            responseBody: { abi_encoded_data: string };
          };
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getLatestCarbonIntensity(
      count: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ timestamp: BN; intensity: BN; verified: boolean }[]>;

    getVerificationHub(txDetails?: Truffle.TransactionDetails): Promise<string>;

    intensityRecords(
      arg0: number | BN | string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: boolean }>;

    isJsonApiProofValid(
      _proof: {
        merkleProof: string[];
        data: {
          attestationType: string;
          sourceId: string;
          votingRound: number | BN | string;
          lowestUsedTimestamp: number | BN | string;
          requestBody: {
            url: string;
            postprocessJq: string;
            abi_signature: string;
          };
          responseBody: { abi_encoded_data: string };
        };
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    recordTimestamps(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
